#
# Copyright (C) 2018 - 2024, Stephan Mueller <smueller@chronox.de>
#

CC		:= gcc
CFLAGS		+= -Wextra -Wall -pedantic -fPIC -O2 -std=gnu99
#Hardening
CFLAGS		+= -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fwrapv --param ssp-buffer-size=4 -fvisibility=hidden -fPIC -DACVPPROXY_EXTENSION

UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Linux)
LDFLAGS		+= -Wl,-z,relro,-z,now,--as-needed -fpic
endif

# Basename of library
NAME		:= acvpproxy_definition_extension
# Include files to install
INCLUDEINSTALL	:=

DESTDIR		:=
ETCDIR		:= /etc
BINDIR		:= /bin
SBINDIR		:= /sbin
SHAREDIR	:= /usr/share/keyutils
MANDIR		:= /usr/share/man
MAN1		:= $(MANDIR)/man1
MAN3		:= $(MANDIR)/man3
MAN5		:= $(MANDIR)/man5
MAN7		:= $(MANDIR)/man7
MAN8		:= $(MANDIR)/man8
INCLUDEDIR	:= /usr/include
LN		:= ln
LNS		:= $(LN) -sf

###############################################################################
#
# Define compilation options
#
###############################################################################
#INCLUDE_DIRS	:= <ACVPPROXY_BASE>/lib <ACVPPROXY_BASE>/lib/module_implementations
INCLUDE_DIRS	:= 
LIBRARY_DIRS	:=
LIBRARIES	:=

CFLAGS		+= $(foreach includedir,$(INCLUDE_DIRS),-I$(includedir))
LDFLAGS		+= $(foreach librarydir,$(LIBRARY_DIRS),-L$(librarydir))
LDFLAGS		+= $(foreach library,$(LIBRARIES),-l$(library))

###############################################################################
#
# Get version name and cross check
#
###############################################################################
#LIBMAJOR   := $(shell grep '^\#define.*MAJVERSION' request_internal.h | awk '{print $$3}')
LIBMAJOR	:= 1
#LIBMINOR   := $(shell grep '^\#define.*MINVERSION' request_internal.h | awk '{print $$3}')
LIBMINOR	:= 0
#LIBPATCH   := $(shell grep '^\#define.*PATCHLEVEL' request_internal.h | awk '{print $$3}')
LIBPATCH	:= 0
LIBVERSION := $(LIBMAJOR).$(LIBMINOR).$(LIBPATCH)

###############################################################################
#
# Guess at the appropriate lib directory and word size
#
###############################################################################
ifeq ($(UNAME_S),Linux)

ifeq ($(origin LIBDIR),undefined)
LIBDIR		:= $(shell ldd /usr/bin/make | grep '\(/libc\.\)' | sed -e 's!.*\(/.*\)/libc[.].*!\1!')
endif
ifeq ($(origin USRLIBDIR),undefined)
USRLIBDIR	:= $(patsubst /lib/%,/usr/lib/%,$(LIBDIR))
endif
BUILDFOR	:= $(shell file /usr/bin/make | sed -e 's!.*ELF \(32\|64\)-bit.*!\1!')-bit

ifeq ($(origin CFLAGS),undefined)
ifeq ($(BUILDFOR),32-bit)
CFLAGS		+= -m32
LIBDIR		:= /lib
USRLIBDIR	:= /usr/lib
else
ifeq ($(BUILDFOR),64-bit)
CFLAGS		+= -m64
LIBDIR		:= /lib64
USRLIBDIR	:= /usr/lib64
endif
endif
endif

else
LIBDIR		:= /lib
USRLIBDIR	:= /usr/lib
endif

###############################################################################
#
# Shared library compilation
#
###############################################################################
#SONAME		:= lib$(NAME).$(LIBEXT).$(LIBMAJOR)
#LIBNAME		:= lib$(NAME).$(LIBEXT).$(LIBVERSION)

ifeq ($(UNAME_S),Linux)
SONAME		?= lib$(NAME).so
LIBNAME		?= lib$(NAME).so
LDFLAGS		+= -Wl,-soname,$(SONAME)
else ifeq ($(UNAME_S),Darwin)
SONAME		?= lib$(NAME).dylib
LIBNAME		?= lib$(NAME).dylib
LDFLAGS		+= -dylib
else
SONAME		?= lib$(NAME).so
LIBNAME		?= lib$(NAME).so
endif

###############################################################################
#
# Define files to be compiled
#
###############################################################################
C_SRCS ?= $(wildcard *.c)
C_OBJS := ${C_SRCS:.c=.o}
OBJS := $(C_OBJS)

analyze_srcs = $(filter %.c, $(sort $(C_SRCS)))
analyze_plists = $(analyze_srcs:%.c=%.plist)

.PHONY: all scan install clean cppcheck distclean 

all: $(NAME)

###############################################################################
#
# Build the library
#
##############################################################################

$(NAME): $(OBJS)
	$(CC) -shared -o $(LIBNAME) $(OBJS) $(LDFLAGS)

$(analyze_plists): %.plist: %.c
	@echo "  CCSA  " $@
	clang --analyze $(CFLAGS) $< -o $@

scan: $(analyze_plists)

cppcheck:
	cppcheck --force -q --enable=performance --enable=warning --enable=portability *.h *.c

asm:
	$(foreach b, $(C_SRCS), $(CC) $(CFLAGS) -S -fverbose-asm -o ${b:.c=.s} $(b);)

install:
	install -m 0755 $(LIBNAME) -D -t $(DESTDIR)$(LIBDIR)/
	$(LNS) $(LIBNAME) $(DESTDIR)$(LIBDIR)/$(SONAME)
	install -m 0644 $(INCLUDEINSTALL) -D -t $(DESTDIR)$(INCLUDEDIR)

###############################################################################
#
# Build the documentation
#
###############################################################################

clean:
	@- $(RM) $(OBJS)
	@- $(RM) $(LIBNAME)
	@- $(RM) $(analyze_plists)

distclean: clean

###############################################################################
#
# Build debugging
#
###############################################################################
show_vars:
	@echo C_SRCS=${C_SRCS}
	@echo OBJS=${OBJS}
	@echo LIBVERSION=$(LIBVERSION)
	@echo APIVERSION=$(APIVERSION)
	@echo LIBDIR=$(LIBDIR)
	@echo USRLIBDIR=$(USRLIBDIR)
	@echo BUILDFOR=$(BUILDFOR)
	@echo SONAME=$(SONAME)
	@echo LIBNAME=$(LIBNAME)
	@echo LDFLAGS=$(LDFLAGS)
	@echo CFLAGS=$(CFLAGS)
